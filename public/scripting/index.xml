<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting on ResInsight</title>
    <link>https://opm.github.io/ResInsight-UserDocumentation/scripting/</link>
    <description>Recent content in Scripting on ResInsight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://opm.github.io/ResInsight-UserDocumentation/scripting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Command Line Interface</title>
      <link>https://opm.github.io/ResInsight-UserDocumentation/scripting/commandlineinterface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opm.github.io/ResInsight-UserDocumentation/scripting/commandlineinterface/</guid>
      <description>ResInsight supports several command line parameters that can be used to automate some tasks using shell scripts.
Command line parameters are prefixed using a double dash. This convention is used on all platforms to make it possible to reuse scripts across different platforms. See GNU Standards for Command Line Interfaces.
Examples on how command line options are used are given below
   Parameter Description     &amp;#45;&amp;#45;help, &amp;#45;&amp;#45;?</description>
    </item>
    
    <item>
      <title>Command File</title>
      <link>https://opm.github.io/ResInsight-UserDocumentation/scripting/commandfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opm.github.io/ResInsight-UserDocumentation/scripting/commandfile/</guid>
      <description>The command file interface allows a sequence of specified commands to be run in order from the command line. The interface is used by supplying the command file as a command line parameter. Once the command file is finished executing, ResInsight will exit.
It is possible to use these commands directly from a Python script. For further details see Python Documentation
Command List Case Control Commands  openProject closeProject setStartDir loadCase createGridCaseGroup createStatisticsCase replaceCase replaceSourceCases  Export Commands  setExportFolder exportMultiCaseSnapshots exportSnapshots exportProperty exportPropertyInViews exportWellPathCompletions exportSimWellFractureCompletions exportMsw exportWellPaths exportVisibleCells exportFlowCharacteristics  Other Commands  runOctaveScript setMainWindowSize computeCaseGroupStatistics setTimeStep scaleFractureTemplate setFractureContainment createMultipleFractures createLgrForCompletions createSaturationPressurePlots  Syntax The command file is comprised of a set of commands to be executed in order.</description>
    </item>
    
    <item>
      <title>Python API - rips</title>
      <link>https://opm.github.io/ResInsight-UserDocumentation/scripting/pythonrips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opm.github.io/ResInsight-UserDocumentation/scripting/pythonrips/</guid>
      <description>ResInsight has a gRPC Remote Procedure Call interface with a Python Client interface. This interface allows you to interact with a running ResInsight instance from a Python script.
The Python client package is available for install via the Python PIP package system with pip install rips as admin user, or pip install --user rips as a regular user.
On some systems the pip command may have to be replaced by python -m pip.</description>
    </item>
    
    <item>
      <title>Octave Interface</title>
      <link>https://opm.github.io/ResInsight-UserDocumentation/scripting/octaveinterface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opm.github.io/ResInsight-UserDocumentation/scripting/octaveinterface/</guid>
      <description>ResInsight provides a flexible interface to Octave including:
 Octave functions that communicates with a running ResInsight session Features to simplify management and editing of Octave scripts from ResInsight Commands to execute scripts using Octave.
  The Octave functions are documented in Octave Interface Reference.
Note: The Octave interface does not support Flow diagnostics and Injection flooding results in addition to Geomechanical cases.
Octave Script Management Octave scripts are available in the Scripts folder in the Project Tree.</description>
    </item>
    
    <item>
      <title>Octave Interface Reference</title>
      <link>https://opm.github.io/ResInsight-UserDocumentation/scripting/octaveinterfacereference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opm.github.io/ResInsight-UserDocumentation/scripting/octaveinterfacereference/</guid>
      <description>Introduction To identify a ResInsight case uniquely in the Octave script, an integer Id (CaseId) is used. This Id can be retrieved in several ways, but there are two main modes of operation regarding this for a particular octave script: Either the script is designed to work on a single case (the &amp;ldquo;Current Case&amp;rdquo;), or the script is designed to access the selection and traverse the cases by itself.</description>
    </item>
    
  </channel>
</rss>